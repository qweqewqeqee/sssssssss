--game:GetService('TestService'):Message("hello")

if _G.ScriptKey and _G.ScriptKey == "skibidigyat1259" then
	game:GetService('TestService'):Message("key detected")
else
	game.Players.LocalPlayer:Kick("wrong key stop tryna use my shit")
	return;
end

if _G.Injected and _G.Injected == true then
	return  
end 

_G.Injected = true;



Drawing = Drawing;

local function Drawing_new(type, info, ext)
	local drawing = Drawing.new(type);
	if info then
		for u, x in pairs(info) do
			drawing[u] = x;
		end
	end
	if ext then
		table.insert(ext, drawing);
	end
	return drawing;
end

local Circle = Drawing_new("Circle", {
	Radius=250,
	Visible=true,
	Color=Color3.new(1, 1, 1),
	Thickness=2,
	Filled=false
}); -- Aimbot Circle

local Circle2 = Drawing_new("Circle", {Radius=50,
	Visible=true,
	Color=Color3.new(0, 0, 0),
	Thickness=2,
	Filled=false
}); -- Triggerbot circle

getgenv().Flags = {};

local DefaultSettings = {};
local Loops = {};
local Notifications = {};
local _OT = {};

do
	Flags["Prediction"] = 8;
	Flags["Smoothing"] = 87;
	Flags["KOCheck"] = true;
	Flags["GlockBoostAmount"] = 90;
	Flags["GlockBoost"] = false
	Flags["YOffset"] = -20;
	Flags["InfiniteStamina"] = false
	Flags["AutoReset"] = false
	_OT["targetPlayer"] = nil
	_OT["holding"] = nil
	Flags["AirShotScale"] = 0
	_OT["CameraLocked"] = false
	_OT["Boosted"] = false
	_OT["Firing"] = false
	Flags["AimlockFOVSize"] = 250
	Flags["TriggerbotFOVSize"] = 70
	Flags["Triggerbot"] = false
	Flags["AntiGroundHit"] = false
	Flags["Blatant"] = false
	Flags["SpawnGamepass"] = false
	Flags["ChatSpy"] = false
	_OT["ESP"] = false
	_OT["ESPName"] = false
	_OT["ESPHealth"] = false
	_OT["ESPVest"] = false
	Flags["SpawnLocation"] = "Front"
	Flags["AutoShoot"] = true
	Flags["LookAt"] = false
	Flags["LookAtSmoothing"] = 80
	Flags["AimlockVisible"] = true
	Flags["TriggerbotVisible"] = true
end

local Version = "1.0.2"

local filename = "Oden.txt"

if not isfile(filename) then
	writefile(filename, [[]])
end

local function getS(service)
	if cloneref then
		return cloneref(game:GetService(service))
	else
		return game:GetService(service)
	end 
end

local UserInputService  =       getS("UserInputService");
local debris 		    =       getS("Debris");
local TweenService      =       getS("TweenService");
local SoundService      =       getS("SoundService");
local Players           =       getS("Players");
local RunService        =       getS("RunService");
local ReplicatedStorage =       getS("ReplicatedStorage");
local Stats             =       getS("Stats");
local HttpService 	    = 	    getS("HttpService");
local CoreGui 			=		getS("CoreGui");
local TestService 		= 		getS("TestService");
local TeleportService   = 		getS("TeleportService");


local AdminStuff = {
	Filtering = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering");
	sayMessage =ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest"),

	GetAdmin = function()
		return loadstring(game:HttpGet("https://raw.githubusercontent.com/uujxUjio/Imperial/refs/heads/main/D%CC%B7%CD%9B%CD%82%CC%A7%CD%85%C3%A5%CC%B8%CC%94%CC%9A%CC%9C7%D2%89%CC%A8%CC%8D%C4%85%CC%B7%CD%98%CC%8E%CC%ACM%D2%88%CC%B5%CC%863%CD%9C%CC%9B%CC%BF%CC%A9N%CC%B8%CD%9B%CC%91!%D2%89%CC%BA%CD%85"))()
	end,
}

local Camera = workspace.CurrentCamera


Loops["RenderStepped"] = RunService.RenderStepped;
Loops["Heartbeat"] = RunService.Heartbeat;
Loops["Stepped"] = RunService.Stepped;

local Camera, camera    = game.Workspace.CurrentCamera, game.Workspace.CurrentCamera;
local LocalPlayer       = Players.LocalPlayer;
local getChar 			= function() return LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait() end
local Mouse             = LocalPlayer:GetMouse();

local raycast = workspace.Raycast
local down = Vector3.new(0, -30, 0)
local r6_up = Vector3.new(0, 6, 0)

local IsGrounded = {}
local PlayerFloor = {}


function getRemote(ToolName, Pos)
	if game.PlaceId == 16702351217 then
		if ToolName == "Shotty" then
			return LocalPlayer.Character:FindFirstChild("Shotty").Shoot:FireServer(Pos)
		elseif ToolName == "Glock" then
			return LocalPlayer.Character:FindFirstChild("Glock").Shoot:FireServer(Pos)
		end
	elseif game.PlaceId == 15852982099 then
		if ToolName == "Shotty" then
			return ReplicatedStorage.ShottyFire:FireServer(Pos)
		elseif ToolName == "Glock" then
			return ReplicatedStorage.GlockFire:FireServer(Pos)
		end
	end
end

local chatFrame       = LocalPlayer.PlayerGui.Chat.Frame
local OriginalChatPos = chatFrame.ChatBarParentFrame.Position

local CFNew = CFrame.new
local V3New = Vector3.new
local V2New = Vector2.new
local INew = Instance.new
local TweenNew = TweenInfo.new
local RGB = Color3.fromRGB

local Keys = {
	AutoShoot_Key = {Value = Enum.UserInputType.MouseButton1},
	Camlock_Key = {Value = Enum.KeyCode.Q},
	OpenDoor_Key = {Value = Enum.KeyCode.X}
}

local RandomSpawns = {
	R1 = CFNew(-520, 4, 55),
	R2 = CFNew(-494, 4, 121),
	R3 = CFNew(-492, 4, 52),
	R4 = CFNew(-464, 4, 54),
	R5 = CFNew(-466, 4, 121),
	R6 = CFNew(-438, 4, 124),
	R7 = CFNew(-436, 4, 55),
	R8 = CFNew(-411, 4, 123),
	R9 = CFNew(-409, 4, 55),
	R10 = CFNew(-381, 4, 54),
	R11 = CFNew(-383, 4, 120),
	R12 = CFNew(-355, 4, 119),
	R13 = CFNew(-353, 4, 55)
}

local FrontSpawns = {
	F1 = CFNew(-1320, -38, -1586),
	F2 = CFNew(-1322, -38, -1522)
}

local BackSpawns = {
	B1 = CFNew(-1516, -38, -1522),
	B2 = CFNew(-1516, -38, -1586)
}


-- // Notif System

local function createNotification(text, time, color)
	if not text then text = "" end;
	if not time then time = 6 end;
	if not color then color = RGB(170, 85, 235) end;

	local notificationContainer = INew("ScreenGui", Players.LocalPlayer:WaitForChild("PlayerGui"))

	local base = 75
	local notigap = 30 
	local yoffset = #Notifications * notigap

	local holder = INew("Frame")
	holder.Position = UDim2.new(0, -30, 0, base + yoffset)
	holder.Size = UDim2.new(0, 0, 0, 23)
	holder.BackgroundTransparency = 0
	holder.Parent = notificationContainer
	holder.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
	holder.BorderSizePixel = 1
	holder.BorderColor3 = Color3.fromRGB(0, 0, 0)

	local background = INew("Frame")
	background.Parent = holder
	background.Size = UDim2.new(1, -4, 1, -4)
	background.BackgroundColor3 = Color3.fromRGB(17, 17, 17)
	background.Position = UDim2.new(0, 2, 0, 2)
	background.BorderSizePixel = 1
	background.BorderColor3 = Color3.fromRGB(0, 0, 0)

	local bar1 = INew("Frame")
	bar1.Size = UDim2.new(0, 1, 1, 0)
	bar1.Parent = background
	bar1.BackgroundColor3 = color
	bar1.Position = UDim2.new(0, 0, 0, 0)
	bar1.BorderSizePixel = 0

	local bar2 = INew("Frame")
	bar2.Size = UDim2.new(0, 0, 0, 1)
	bar2.Position = UDim2.new(0, 0, 0, 15)
	bar2.Parent = background
	bar2.BackgroundColor3 = color
	bar2.BorderSizePixel = 0

	local notif = INew("TextLabel")
	notif.TextXAlignment = Enum.TextXAlignment.Left
	notif.Position = UDim2.new(0, 3, 0, 0)
	notif.Size = UDim2.new(1, 0, 1, 0)
	notif.Parent = background
	notif.Font = Enum.Font.Ubuntu
	notif.TextColor3 = Color3.new(1, 1, 1)
	notif.BackgroundTransparency = 1
	notif.TextSize = 12.00
	notif.Text = text

	holder.Size = UDim2.new(0, notif.TextBounds.X + 20, 0, 19)
	bar2.Size = UDim2.new(0, 1, 0, 1)

	local sound = INew("Sound")
	sound.Name = "Ohkay"
	sound.SoundId = "rbxassetid://8726881116" 
	sound.Parent = holder
	sound:Play()

	local tweenInfo = TweenNew(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
	local tween = TweenService:Create(holder, tweenInfo, {Size = UDim2.new(0, notif.TextBounds.X + 10, 0, 19), Position = UDim2.new(0, 20, 0, base + yoffset)})
	tween:Play()

	local tweenbar = TweenService:Create(bar2, tweenInfo, {Size = UDim2.new(0, background.AbsoluteSize.X - 1, 0, 1)})
	tweenbar:Play()

	table.insert(Notifications, holder) 

	task.spawn(function()
		task.wait(time)
		local fade = TweenService:Create(holder, TweenNew(1, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
		fade:Play()
		fade.Completed:Connect(function()
			holder:Destroy()
			for i, notification in pairs(Notifications) do
				if notification == holder then
					table.remove(Notifications, i)
					break
				end
			end

			for i, notification in pairs(Notifications) do
				local yoffset2 = (i - 1) * notigap
				TweenService:Create(notification, TweenNew(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(0, 20, 0, base + yoffset2)}):Play()
			end
		end)
	end)
end

-- // Library Tables
local library = {}
local utility = {}
local obelus = {
	connections = {}
}
-- // Variables
local uis = game:GetService("UserInputService")
local cre = game:GetService("CoreGui")
-- // Indexing
library.__index = library
-- // Functions
do
	function utility:Create(createInfo)
		local createInfo = createInfo or {}
		--
		if createInfo.Type then
			local instance = Instance.new(createInfo.Type)
			--
			if createInfo.Properties and typeof(createInfo.Properties) == "table" then
				for property, value in pairs(createInfo.Properties) do
					instance[property] = value
				end
			end
			--
			return instance
		end
	end
	--
	function utility:Connection(connectionInfo)
		local connectionInfo = connectionInfo or {}
		--
		if connectionInfo.Type then
			local connection = connectionInfo.Type:Connect(connectionInfo.Callback or function() end)
			--
			obelus.connections[#obelus.connections] = connection
			--
			return connection
		end
	end
	--
	function utility:RemoveConnection(connectionInfo)
		local connectionInfo = connectionInfo or {}
		--
		if connectionInfo.Connection then
			local found = table.find(obelus.connections, connectionInfo.Connection)
			--
			if found then
				connectionInfo.Connection:Disconnect()
				--
				table.remove(obelus.connections, found)
			end
		end
	end
end
-- // Ui Functions
do
	function library:Window(windowInfo)
		-- // Variables
		local info = windowInfo or {}
		local window = {Pages = {}, Dragging = false, Delta = UDim2.new(), Delta2 = Vector3.new()}
		-- // Utilisation
		local screen = utility:Create({Type = "ScreenGui", Properties = {
			Parent = cre,
			DisplayOrder = 8888,
			IgnoreGuiInset = true,
			Name = "obleus",
			ZIndexBehavior = "Global",
			ResetOnSpawn = false
		}})

		game:GetService("UserInputService").InputBegan:Connect(function(k,g)
			if not g then 
				if k.KeyCode == Enum.KeyCode.RightAlt then 
					screen.Enabled = not screen.Enabled 
				end
			end
		end)
		--
		local main = utility:Create({Type = "Frame", Properties = {
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = Color3.fromRGB(51, 51, 51),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Parent = screen,
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Size = UDim2.new(0, 516, 0, 563)
		}})
		--
		local frame = utility:Create({Type = "Frame", Properties = {
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = Color3.fromRGB(12, 12, 12),
			BorderSizePixel = 0,
			Parent = main,
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Size = UDim2.new(1, -2, 1, -2),
		}})

		--
		local draggingButton = utility:Create({Type = "TextButton", Properties = {
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Parent = frame,
			Position = UDim2.new(0, 0, 0, 0),
			Size = UDim2.new(1, 0, 0, 24),
			Text = ""
		}})
		--
		local title = utility:Create({Type = "TextLabel", Properties = {
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Parent = frame,
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(1, -16, 0, 15),
			Font = "Code",
			RichText = true,
			Text = info.Name or info.name or "obleus",
			TextColor3 = Color3.fromRGB(142, 142, 142),
			TextStrokeTransparency = 0.5,
			TextSize = 13,
			TextXAlignment = "Left"
		}})
		--
		local accent = utility:Create({Type = "Frame", Properties = {
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Parent = frame,
			Position = UDim2.new(0, 8, 0, 22),
			Size = UDim2.new(1, -16, 0, 2)
		}})
		--
		local accentFirst = utility:Create({Type = "Frame", Properties = {
			BackgroundColor3 = Color3.fromRGB(170, 85, 235),
			BorderSizePixel = 0,
			Parent = accent,
			Position = UDim2.new(0, 0, 0, 0),
			Size = UDim2.new(1, 0, 0, 1)
		}})
		--
		local accentSecond = utility:Create({Type = "Frame", Properties = {
			BackgroundColor3 = Color3.fromRGB(101, 51, 141),
			BorderSizePixel = 0,
			Parent = accent,
			Position = UDim2.new(0, 0, 0, 1),
			Size = UDim2.new(1, 0, 0, 1)
		}})
		--
		local tabs = utility:Create({Type = "Frame", Properties = {
			BackgroundColor3 = Color3.fromRGB(1, 1, 1),
			BorderSizePixel = 0,
			Parent = frame,
			Position = UDim2.new(0, 8, 0, 29),
			Size = UDim2.new(1, -16, 0, 30)
		}})
		--
		local tabsInline = utility:Create({Type = "Frame", Properties = {
			BackgroundColor3 = Color3.fromRGB(1, 1, 1),
			BorderSizePixel = 0,
			Parent = tabs,
			Position = UDim2.new(0, 0, 0, 0),
			Size = UDim2.new(1, -1, 1, 0)
		}})
		--
		utility:Create({Type = "UIListLayout", Properties = {
			Padding = UDim.new(0, 0),
			Parent = tabsInline,
			FillDirection = "Horizontal"
		}})
		--
		local pagesHolder = utility:Create({Type = "Frame", Properties = {
			BackgroundColor3 = Color3.fromRGB(51, 51, 51),
			BorderColor3 = Color3.fromRGB(0, 0, 0),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Parent = frame,
			Position = UDim2.new(0, 8, 0, 65),
			Size = UDim2.new(1, -16, 1, -76)
		}})
		--
		local pagesFrame = utility:Create({Type = "Frame", Properties = {
			BackgroundColor3 = Color3.fromRGB(13, 13, 13),
			BorderSizePixel = 0,
			Parent = pagesHolder,
			Position = UDim2.new(0, 1, 0, 1),
			Size = UDim2.new(1, -2, 1, -2)
		}})
		--
		local pagesFolder = utility:Create({Type = "Folder", Properties = {
			Parent = pagesFrame
		}})
		-- // Functions / Connections
		local connection = utility:Connection({Type = draggingButton.InputBegan, Callback = function(Input)
			if not window.Dragging and Input.UserInputType == Enum.UserInputType.MouseButton1 then
				window.Dragging = true
				window.Delta = main.Position
				window.Delta2 = Input.Position
			end
		end})
		--
		local connection2 = utility:Connection({Type = uis.InputEnded, Callback = function(Input)
			if window.Dragging and Input.UserInputType == Enum.UserInputType.MouseButton1 then
				window.Dragging = false
				window.Delta = UDim2.new()
				window.Delta2 = Vector3.new()
			end
		end})
		--
		local connection3 = utility:Connection({Type = uis.InputChanged, Callback = function(Input)
			if window.Dragging then
				local Delta = Input.Position - window.Delta2
				main.Position = UDim2.new(window.Delta.X.Scale, window.Delta.X.Offset + Delta.X, window.Delta.Y.Scale, window.Delta.Y.Offset + Delta.Y)
			end
		end})
		-- // Nested Functions
		function window:RefreshTabs()
			for index, page in pairs(window.Pages) do
				page.Tab.Size = UDim2.new(1 / (#window.Pages), 0, 1, 0)
			end
		end
		--
		function window:Page(pageInfo)
			-- // Variables
			local info = pageInfo or {}
			local page = {Open = false}
			-- // Utilisation
			local tab = utility:Create({Type = "Frame", Properties = {
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Parent = tabsInline,
				Size = UDim2.new(1, 0, 1, 0)
			}})
			--
			local tabButton = utility:Create({Type = "TextButton", Properties = {
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Parent = tab,
				Position = UDim2.new(0, 0, 0, 0),
				Size = UDim2.new(1, 0, 1, 0)
			}})
			--
			local tabInline = utility:Create({Type = "Frame", Properties = {
				BackgroundColor3 = Color3.fromRGB(41, 41, 41),
				BorderSizePixel = 0,
				Parent = tab,
				Position = UDim2.new(0, 1, 0, 1),
				Size = UDim2.new(1, -1, 1, -2)
			}})
			--
			local tabInlineGradient = utility:Create({Type = "Frame", Properties = {
				BackgroundColor3 = Color3.fromRGB(41, 41, 41),
				BorderSizePixel = 0,
				Parent = tabInline,
				Position = UDim2.new(0, 1, 0, 1),
				Size = UDim2.new(1, -2, 1, -2)
			}})
			--
			local tabGradient = utility:Create({Type = "UIGradient", Properties = {
				Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 100, 100))}),
				Rotation = 90,
				Parent = tabInlineGradient
			}})
			--
			local tabTitle = utility:Create({Type = "TextLabel", Properties = {
				AnchorPoint = Vector2.new(0, 0.5),
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Parent = tabInlineGradient,
				Position = UDim2.new(0, 4, 0.5, 0),
				Size = UDim2.new(1, -8, 0, 15),
				Font = "Code",
				RichText = true,
				Text = info.Name or info.name or "tab",
				TextColor3 = Color3.fromRGB(142, 142, 142),
				TextStrokeTransparency = 0.5,
				TextSize = 13,
				TextXAlignment = "Center"
			}})
			--
			local pageHolder = utility:Create({Type = "Frame", Properties = {
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Parent = pagesFolder,
				Position = UDim2.new(0, 10, 0, 10),
				Size = UDim2.new(1, -20, 1, -20),
				Visible = false
			}})
			--
			local leftHolder = utility:Create({Type = "Frame", Properties = {
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Parent = pageHolder,
				Position = UDim2.new(0, 0, 0 ,0),
				Size = UDim2.new(0.5, -5, 1, 0)
			}})
			--
			local rightHolder = utility:Create({Type = "Frame", Properties = {
				AnchorPoint = Vector2.new(1, 0),
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				Parent = pageHolder,
				Position = UDim2.new(1, 0, 0 ,0),
				Size = UDim2.new(0.5, -5, 1, 0)
			}})
			-- // Functions / Connections
			utility:Connection({Type = tabButton.MouseButton1Down, Callback = function()
				if not page.open then
					for index, other_page in pairs(window.Pages) do
						if other_page ~= page then
							other_page:Turn(false)
						end
					end
				end
				--
				page:Turn(true)
			end})
			-- // Nested Functions
			function page:Turn(state)
				tabTitle.TextColor3 = state and Color3.fromRGB(170, 85, 235) or Color3.fromRGB(142, 142, 142)
				tabGradient.Color = state and ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(155, 155, 155))}) or ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 100, 100))})
				--
				page.PageHolder.Visible = state
				page.Open = state
			end
			--
			function page:Section(sectionInfo)
				-- // Variables
				local info = sectionInfo or {}
				local section = {}
				-- // Utilisation
				local sectionMain = utility:Create({Type = "Frame", Properties = {
					BackgroundColor3 = Color3.fromRGB(45, 45, 45),
					BorderColor3 = Color3.fromRGB(13, 13, 13),
					BorderMode = "Inset",
					BorderSizePixel = 1,
					Parent = page[((info.Side and info.Side:lower() == "right") or (info.side and info.side:lower() == "right")) and "Right" or "Left"],
					Position = UDim2.new(0, 0, 0, 0),
					Size = UDim2.new(1, 0, 0, (info.Size or info.size or 200) + 4)
				}})
				--
				local sectionFrame = utility:Create({Type = "Frame", Properties = {
					BackgroundColor3 = Color3.fromRGB(19, 19, 19),
					BorderSizePixel = 0,
					Parent = sectionMain,
					Position = UDim2.new(0, 1, 0, 1),
					Size = UDim2.new(1, -2, 1, -2)
				}})
				--
				local sectionTitle = utility:Create({Type = "TextLabel", Properties = {
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Parent = sectionMain,
					Position = UDim2.new(0, 13, 0, 0),
					Size = UDim2.new(1, -26, 0, 15),
					Font = "Code",
					RichText = true,
					Text = info.Name or info.name or "new section",
					TextColor3 = Color3.fromRGB(205, 205, 205),
					TextStrokeTransparency = 0.5,
					TextSize = 13,
					TextXAlignment = "Left",
					ZIndex = 2
				}})
				--
				local sectionTitleLine = utility:Create({Type = "Frame", Properties = {
					BackgroundColor3 = Color3.fromRGB(19, 19, 19),
					BorderSizePixel = 0,
					Parent = sectionMain,
					Position = UDim2.new(0, 9, 0, 0),
					Size = UDim2.new(0, sectionTitle.TextBounds.X + 6, 0, 1)
				}})
				--
				local sectionScrolling = utility:Create({Type = "Frame", Properties = {
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Parent = sectionMain,
					Position = UDim2.new(0, 1, 0, 1),
					Size = UDim2.new(1, -2, 1, -2),
					Visible = false
				}})
				--
				local sectionScrollingBar = utility:Create({Type = "Frame", Properties = {
					AnchorPoint = Vector2.new(1, 0),
					BackgroundColor3 = Color3.fromRGB(45, 45, 45),
					BorderSizePixel = 0,
					Parent = sectionScrolling,
					Position = UDim2.new(1, 0, 0, 0),
					Size = UDim2.new(0, 5, 1, 0),
					ZIndex = 3
				}})
				--
				local sectionScrollingGradient = utility:Create({Type = "ImageLabel", Properties = {
					AnchorPoint = Vector2.new(0, 1),
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Parent = sectionScrolling,
					Position = UDim2.new(0, 0, 1, 0),
					Size = UDim2.new(1, 0, 0, 20),
					ZIndex = 2,
					Image = "rbxassetid://7783533907",
					ImageTransparency = 0,
					ImageColor3 = Color3.fromRGB(19, 19, 19),
					ScaleType = "Stretch"
				}})
				--
				local sectionContentHolder = utility:Create({Type = "ScrollingFrame", Properties = {
					BackgroundTransparency = 1,
					BorderSizePixel = 0,
					Parent = sectionFrame,
					Position = UDim2.new(0, 0, 0, 0),
					Size = UDim2.new(1, 0, 1, 0),
					ZIndex = 4,
					AutomaticCanvasSize = "Y",
					BottomImage = "rbxassetid://7783554086",
					CanvasSize = UDim2.new(0, 0, 0, 0),
					MidImage = "rbxassetid://7783554086",
					ScrollBarImageColor3 = Color3.fromRGB(65, 65, 65),
					ScrollBarThickness = 4,
					TopImage = "rbxassetid://7783554086",
					VerticalScrollBarInset = "ScrollBar"
				}})
				--
				utility:Create({Type = "UIListLayout", Properties = {
					Padding = UDim.new(0, 5),
					Parent = sectionContentHolder,
					FillDirection = "Vertical"
				}})
				--
				local sectionInline = utility:Create({Type = "Frame", Properties = {
					BackgroundColor3 = Color3.fromRGB(19, 19, 19),
					BorderSizePixel = 0,
					Parent = sectionContentHolder,
					Position = UDim2.new(0, 1, 0, 1),
					Size = UDim2.new(1, 0, 0, 10)
				}})
				-- // Functions / Connections
				-- // Nested Functions
				function section:Update()
					if sectionContentHolder.AbsoluteCanvasSize.Y > ((info.Size or info.size or 200) + 4) then
						sectionScrolling.Visible = true
					else
						sectionScrolling.Visible = false
					end
				end
				--
				function section:Label(labelInfo)
					-- // Variables
					local info = labelInfo or {}
					local label = {}
					-- // Utilisation
					local contentHolder = utility:Create({Type = "Frame", Properties = {
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = sectionContentHolder,
						Size = UDim2.new(1, 0, 0, 14)
					}})
					--
					local labelTitle = utility:Create({Type = "TextLabel", Properties = {
						AnchorPoint = Vector2.new(0, 0),
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = contentHolder,
						Size = UDim2.new(1, -(info.Offset or 36), 1, 0),
						Position = UDim2.new(0, info.Offset or 36, 0, 0),
						Font = "Code",
						RichText = true,
						Text = info.Name or info.name or info.Text or info.text or "new label",
						TextColor3 = Color3.fromRGB(180, 180, 180),
						TextStrokeTransparency = 0.5,
						TextSize = 13,
						TextXAlignment = "Left"
					}})
					-- // Functions / Connections
					-- // Nested Functions
					function label:Remove()
						contentHolder:Remove()
						label = nil
						--
						section:Update()
					end
					-- // Returning + Other
					section:Update()
					--
					return label
				end
				--
				function section:Toggle(toggleInfo)
					-- // Variables
					local info = toggleInfo or {}
					local toggle = {
						state = (info.Default or info.default or info.Def or info.def or false),
						callback = (info.Callback or info.callback or function() end)
					}
					-- // Utilisation
					local contentHolder = utility:Create({Type = "Frame", Properties = {
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = sectionContentHolder,
						Size = UDim2.new(1, 0, 0, 14)
					}})
					--
					local toggleButton = utility:Create({Type = "TextButton", Properties = {
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = contentHolder,
						Position = UDim2.new(0, 0, 0, 0),
						Size = UDim2.new(1, 0, 1, 0),
						Text = ""
					}})
					--
					local toggleTitle = utility:Create({Type = "TextLabel", Properties = {
						AnchorPoint = Vector2.new(0, 0),
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = contentHolder,
						Size = UDim2.new(1, -36, 1, 0),
						Position = UDim2.new(0, 36, 0, 0),
						Font = "Code",
						RichText = true,
						Text = info.Name or info.name or info.Text or info.text or "new toggle",
						TextColor3 = Color3.fromRGB(180, 180, 180),
						TextStrokeTransparency = 0.5,
						TextSize = 13,
						TextXAlignment = "Left"
					}})
					--
					local toggleFrame = utility:Create({Type = "Frame", Properties = {
						BackgroundColor3 = Color3.fromRGB(1, 1, 1),
						BorderSizePixel = 0,
						Parent = contentHolder,
						Position = UDim2.new(0, 16, 0, 2),
						Size = UDim2.new(0, 10, 0, 10)
					}})
					--
					local toggleInlineGradient = utility:Create({Type = "Frame", Properties = {
						BackgroundColor3 = toggle.state and Color3.fromRGB(170, 85, 235) or Color3.fromRGB(63, 63, 63),
						BorderSizePixel = 0,
						Parent = toggleFrame,
						Position = UDim2.new(0, 1, 0, 1),
						Size = UDim2.new(1, -2, 1, -2)
					}})
					--
					local toggleGradient = utility:Create({Type = "UIGradient", Properties = {
						Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(125, 125, 125))}),
						Rotation = 90,
						Parent = toggleInlineGradient
					}})
					-- // Functions / Connections
					local connection = utility:Connection({Type = toggleButton.MouseButton1Down, Callback = function()
						toggle.state = not toggle.state
						toggleInlineGradient.BackgroundColor3 = toggle.state and Color3.fromRGB(170, 85, 235) or Color3.fromRGB(63, 63, 63)
						toggle.callback(toggle.state)
					end})
					-- // Nested Functions
					function toggle:Remove()
						contentHolder:Remove()
						toggle = nil
						--
						utility:RemoveConnection({Connection = connection})
						connection = nil
						--
						section:Update()
					end
					--
					function toggle:Get()
						return toggle.state
					end
					--
					function toggle:Set(value)
						if typeof(value) == "boolean" then
							toggle.state = value

							if toggle.state == true then
								toggleInlineGradient.BackgroundColor3 = Color3.fromRGB(170, 85, 235)
							else
								toggleInlineGradient.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
							end
						end
					end
					-- // Returning + Other
					section:Update()
					--
					return toggle
				end
				--
				function section:Button(buttonInfo)
					-- // Variables
					local info = buttonInfo or {}
					local button = {
						callback = (info.Callback or info.callback or function() end)
					}
					-- // Utilisation
					local contentHolder = utility:Create({Type = "Frame", Properties = {
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = sectionContentHolder,
						Size = UDim2.new(1, 0, 0, 20)
					}})
					--
					local buttonButton = utility:Create({Type = "TextButton", Properties = {
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = contentHolder,
						Position = UDim2.new(0, 0, 0, 0),
						Size = UDim2.new(1, 0, 1, 0),
						Text = ""
					}})
					--
					local buttonFrame = utility:Create({Type = "Frame", Properties = {
						BackgroundColor3 = Color3.fromRGB(45, 45, 45),
						BorderColor3 = Color3.fromRGB(1, 1, 1),
						BorderMode = "Inset",
						BorderSizePixel = 1,
						Parent = contentHolder,
						Position = UDim2.new(0, 16, 0, 0),
						Size = UDim2.new(1, -32, 1, 0)
					}})
					--
					local buttonInline = utility:Create({Type = "Frame", Properties = {
						BackgroundColor3 = Color3.fromRGB(25, 25, 25),
						BorderSizePixel = 0,
						Parent = buttonFrame,
						Position = UDim2.new(0, 1, 0, 1),
						Size = UDim2.new(1, -2, 1, -2)
					}})
					--
					local buttonTitle = utility:Create({Type = "TextLabel", Properties = {
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = contentHolder,
						Size = UDim2.new(1, -32, 1, 0),
						Position = UDim2.new(0, 16, 0, 0),
						Font = "Code",
						RichText = true,
						Text = info.Name or info.name or info.Text or info.text or "new button",
						TextColor3 = Color3.fromRGB(180, 180, 180),
						TextStrokeTransparency = 0.5,
						TextSize = 13,
						TextXAlignment = "Center"
					}})
					--
					-- // Functions / Connections
					local connection = utility:Connection({Type = buttonButton.MouseButton1Down, Callback = function()
						button.callback()
					end})
					-- // Nested Functions
					function button:Remove()
						contentHolder:Remove()
						button = nil
						--
						utility:RemoveConnection({Connection = connection})
						connection = nil
						--
						section:Update()
					end
					-- // Returning + Other
					section:Update()
					--
					return button
				end
				--
				function section:Slider(sliderInfo)
					-- // Variables
					local info = sliderInfo or {}
					local slider = {
						state = (info.Default or info.default or info.Def or info.def or 0),
						min = (info.Minimum or info.minimum or info.Min or info.min or 0),
						max = (info.Maximum or info.maximum or info.Max or info.max or 10),
						decimals = (1 / (info.Decimals or info.decimals or info.Tick or info.tick or 0.25)),
						suffix = (info.Suffix or info.suffix or info.Ending or info.ending or ""),
						callback = (info.Callback or info.callback or function() end),
						holding = false
					}
					-- // Utilisation
					local contentHolder = utility:Create({Type = "Frame", Properties = {
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = sectionContentHolder,
						Size = UDim2.new(1, 0, 0, (info.Name or info.name or info.Text or info.text) and 24 or 10)
					}})
					--
					local sliderButton = utility:Create({Type = "TextButton", Properties = {
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = contentHolder,
						Position = UDim2.new(0, 0, 0, 0),
						Size = UDim2.new(1, 0, 1, 0),
						Text = ""
					}})
					--
					if (info.Name or info.name or info.Text or info.text) then
						local sliderTitle = utility:Create({Type = "TextLabel", Properties = {
							AnchorPoint = Vector2.new(0, 0),
							BackgroundTransparency = 1,
							BorderSizePixel = 0,
							Parent = contentHolder,
							Size = UDim2.new(1, -16, 0, 14),
							Position = UDim2.new(0, 16, 0, 0),
							Font = "Code",
							RichText = true,
							Text = (info.Name or info.name or info.Text or info.text),
							TextColor3 = Color3.fromRGB(180, 180, 180),
							TextStrokeTransparency = 0.5,
							TextSize = 13,
							TextXAlignment = "Left"
						}})
					end
					--
					local sliderFrame = utility:Create({Type = "Frame", Properties = {
						BackgroundColor3 = Color3.fromRGB(1, 1, 1),
						BorderSizePixel = 0,
						Parent = contentHolder,
						Position = UDim2.new(0, 16, 0, (info.Name or info.name or info.Text or info.text) and 14 or 0),
						Size = UDim2.new(1, -32, 0, 10)
					}})
					--
					local sliderInlineGradient = utility:Create({Type = "Frame", Properties = {
						BackgroundColor3 = Color3.fromRGB(63, 63, 63),
						BorderSizePixel = 0,
						Parent = sliderFrame,
						Position = UDim2.new(0, 1, 0, 1),
						Size = UDim2.new(1, -2, 1, -2)
					}})
					--
					local sliderGradient = utility:Create({Type = "UIGradient", Properties = {
						Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(125, 125, 125))}),
						Rotation = 90,
						Parent = sliderInlineGradient
					}})
					--
					local sliderSlideHolder = utility:Create({Type = "Frame", Properties = {
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = sliderFrame,
						Position = UDim2.new(0, 1, 0, 1),
						Size = UDim2.new(1, -2, 1, -2)
					}})
					--
					local sliderSlide = utility:Create({Type = "Frame", Properties = {
						BackgroundColor3 = Color3.fromRGB(170, 85, 235),
						BorderSizePixel = 0,
						Parent = sliderSlideHolder,
						Position = UDim2.new(0, 0, 0, 0),
						Size = UDim2.new(0.5, 0, 1, 0)
					}})
					--
					local sliderGradient = utility:Create({Type = "UIGradient", Properties = {
						Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(125, 125, 125))}),
						Rotation = 90,
						Parent = sliderSlide
					}})
					--
					local sliderValue = utility:Create({Type = "TextLabel", Properties = {
						AnchorPoint = Vector2.new(0.5, 0.25),
						BackgroundTransparency = 1,
						BorderSizePixel = 0,
						Parent = sliderSlide,
						Size = UDim2.new(0, 10, 0, 14),
						Position = UDim2.new(1, 0, 0.5, 0),
						Font = "Code",
						RichText = true,
						Text = tostring(slider.state) .. tostring(slider.suffix),
						TextColor3 = Color3.fromRGB(180, 180, 180),
						TextStrokeTransparency = 0.5,
						TextSize = 13,
						TextXAlignment = "Left"
					}})
					-- // Functions / Connections
					local connection = utility:Connection({Type = sliderButton.MouseButton1Down, Callback = function()
						slider.holding = true
						slider:Refresh()
					end})
					--
					local connection2 = utility:Connection({Type = uis.InputEnded, Callback = function()
						slider.holding = false
					end})
					--
					local connection3 = utility:Connection({Type = uis.InputChanged, Callback = function()
						if slider.holding then
							slider:Refresh()
						end
					end})
					-- // Nested Functions
					function slider:Remove()
						contentHolder:Remove()
						slider = nil
						--
						utility:RemoveConnection({Connection = connection})
						connection = nil
						utility:RemoveConnection({Connection = connection2})
						connection2 = nil
						utility:RemoveConnection({Connection = connection3})
						connection3 = nil
						--
						section:Update()
					end
					--
					function slider:Get()
						return slider.state
					end
					--
					function slider:Set(value)
						slider.state = math.clamp(math.round(value * slider.decimals) / slider.decimals, slider.min, slider.max)
						sliderSlide.Size = UDim2.new(1 - ((slider.max - slider.state) / (slider.max - slider.min)), 0, 1, 0)
						sliderValue.Text = tostring(slider.state) .. tostring(slider.suffix)
						pcall(slider.callback, slider.state)
					end
					--
					function slider:Refresh()
						if slider.holding then
							local mouseLocation = uis:GetMouseLocation()
							slider:Set(math.clamp(math.floor((slider.min + (slider.max - slider.min) * (math.clamp(mouseLocation.X - sliderSlide.AbsolutePosition.X, 0, sliderSlideHolder.AbsoluteSize.X) / sliderSlideHolder.AbsoluteSize.X)) * slider.decimals) / slider.decimals, slider.min, slider.max))
						end
					end
					-- // Returning + Other
					section:Update()
					slider:Set(slider.state)
					--
					return slider
				end
				-- // Returning + Other
				return section
			end
			-- // Returning + Other
			page.Tab = tab
			page.PageHolder = pageHolder
			page.Left = leftHolder
			page.Right = rightHolder
			--
			window.Pages[#window.Pages + 1] = page
			window:RefreshTabs()
			--
			return page
		end
		-- // Returning
		return window
	end
end
-- // Main

local function isTargetOnScreen(targetPlayer : Player)
	local targetCharacter = targetPlayer.Character
	if not targetCharacter or not targetCharacter:FindFirstChild("HumanoidRootPart") then
		return false 
	end

	local targetPos, onScreen = Camera:WorldToViewportPoint(targetCharacter.HumanoidRootPart.Position)

	if not onScreen then
		return false
	end

	local rayOrigin = Camera.CFrame.Position
	local direction = (targetCharacter.HumanoidRootPart.Position - rayOrigin).Unit
	local ray = Ray.new(rayOrigin, direction * 1000) 
	local hitPart = workspace:FindPartOnRayWithIgnoreList(ray, {Camera, LocalPlayer.Character})

	if hitPart and hitPart:IsDescendantOf(targetCharacter) then
		return true 
	else
		return false 
	end
end

local function ForceFieldCheck(targetPlayer : Player)
	local targetCharacter = targetPlayer.Character

	if targetPlayer.Character:FindFirstChildOfClass("ForceField") then
		return true
	else
		return false
	end
end

function Inf()
	if Flags["InfiniteStamina"] then
		ReplicatedStorage.Touch1:FireServer({
			Handle = {Swing = workspace.OneHoop.Score.Sound},
			Info = {
				Stam = {Value = -(Value or math.huge)},
				Range = {Value = 0}
			}
		}, 0, false, 0)


		LocalPlayer.Backpack:FindFirstChild("ServerTraits").Stann:Destroy()

		local i = INew("IntValue")
		i.Name = "Stann"
		i.Parent = LocalPlayer.Backpack:FindFirstChild("ServerTraits")
		i.Value = 100
	else
		return;
	end
end


local function vested(player : Player)
	if player.Character:FindFirstChild("BulletResist") then
		return true
	else
		return false
	end
end

local function KOed(player : Player) 
	if player.Character:FindFirstChild("KO") or player.Character:FindFirstChildOfClass("Humanoid").Health == 0 then
		return true
	else
		return false
	end
end

local function esp(player)

	if not _OT["ESP"] then
		for i, v in ipairs(Players:GetPlayers()) do
			if v.Character and v.Character:FindFirstChild("Head") then
				local head, char = v.Character.Head, v.Character
				if head:FindFirstChild("wl") and char:FindFirstChild("ohkay") then
					head:FindFirstChild("wl"):Destroy();
					char:FindFirstChild("ohkay"):Destroy();
					return
				end
			end
		end
	end

	local bgui = INew('BillboardGui')
	local tlab = INew('TextLabel', bgui)
	local highlight = INew("Highlight")

	highlight.Name = "ohkay"
	highlight.FillTransparency = 0.7
	highlight.OutlineTransparency = 0
	highlight.FillColor = Color3.fromRGB(170, 85, 235) 
	highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 

	bgui.Name = "wl"
	bgui.Adornee = Players[player].Character:FindFirstChild("Head")
	bgui.AlwaysOnTop = true
	bgui.ExtentsOffset = V3New(0, 1, 0)
	bgui.Size = UDim2.new(0, 5, 0, 5)

	tlab.Name = "wl"
	tlab.BackgroundColor3 = Color3.new(1, 1, 1)
	tlab.BackgroundTransparency = 1
	tlab.BorderSizePixel = 0
	tlab.Position = UDim2.new(0, 0, 0, -40)
	tlab.Size = UDim2.new(1, 0, 10, 0)
	tlab.Visible = true
	tlab.ZIndex = 10
	tlab.Font = Enum.Font.ArialBold
	tlab.TextSize = 14
	tlab.Text = ""
	tlab.TextColor3 = Color3.fromRGB(255, 255, 255)
	tlab.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
	tlab.TextStrokeTransparency = 1

	spawn(function()
		while true do
			pcall(function()
				local playerCharacter = Players[player].Character
				if playerCharacter and playerCharacter:FindFirstChild("Head") then
					bgui.Parent = playerCharacter.Head
					highlight.Parent = playerCharacter
					bgui.Adornee = Players[player].Character:FindFirstChild("Head")

					tlab.Text = ""

					if _OT["ESPName"] then
						tlab.Text = Players[player].DisplayName
					end

					if _OT["ESPVest"] then
						tlab.Text = tlab.Text .. " Vested: " .. tostring(vested(Players[player]))
					end

					if _OT["ESPHealth"] then
						local humanoid = playerCharacter:FindFirstChildOfClass("Humanoid")
						if humanoid then
							tlab.Text = tlab.Text .. " Health: " .. tostring(math.floor(humanoid.Health))
						end
					end
				end
			end)
			task.wait()
		end
	end)
end


function MakeSound()
	local sound = INew("Sound", workspace)
	sound.Name = "Ohkay"
	sound.SoundId = "rbxassetid://8726881116"
	sound:Play()
	debris:AddItem(sound, sound.TimeLength + 1)
end

local function getSmoothingValue(percentage)
	return 1 - (percentage / 100);
end

local function GetHead(player : Player)
	if (player and player.Character) then
		return player.Character:FindFirstChild("Head");
	end
	return nil;
end

local function isPlayerOnScreen(position)
	local viewportPoint = camera:WorldToViewportPoint(position)
	return viewportPoint.Z > 0
end

local function isPlayerInRadius(player, center, radius)
	local head = GetHead(player)
	if head then
		local viewportPoint = camera:WorldToViewportPoint(head.Position)
		if viewportPoint.Z > 0 then
			local screenPosition = V2New(viewportPoint.X, viewportPoint.Y)
			local distance = (screenPosition - center).Magnitude
			if distance <= radius then
				return true, screenPosition, distance
			end
		end
	end
	return false, nil, math.huge
end


local function findClosestPlayer()
	local Distance = math.huge
	local closestPlayer = nil
	local mouseLocation = UserInputService:GetMouseLocation()

	for _, v in ipairs(Players:GetPlayers()) do
		if GetHead(v) and v ~= LocalPlayer then
			local targetHead = GetHead(v)
			local targetPos = camera:WorldToViewportPoint(targetHead.Position)

			if isPlayerOnScreen(targetHead.Position) then
				local screenDistance = (V2New(targetPos.X, targetPos.Y) - mouseLocation).Magnitude

				if screenDistance <= Circle.Radius then
					local mag = (LocalPlayer:GetMouse().Hit.Position - targetHead.Position).Magnitude
					if mag < Distance then
						closestPlayer = v
						Distance = mag
					end
				end
			end
		end
	end
	return closestPlayer
end

local function CheckAired(player)
	if (player.Character:FindFirstChildOfClass("Humanoid").FloorMaterial == Enum.Material.Air) or player.Character.Head.Velocity.Y >= 1 or (player.Character:FindFirstChildOfClass("Humanoid").FloorMaterial == Enum.Material.Air) and player.Character.Head.Velocity.Y >= 1 then
		return true
	else
		return false
	end
end

local function grounded(player)
	local params = RaycastParams.new()
	params.FilterDescendantsInstances = {player.Character}
	params.RespectCanCollide = true

	local character = player.Character
	local primarypart = character and character:FindFirstChild("HumanoidRootPart")

	player.CharacterAdded:Connect(function(chr)
		params.FilterDescendantsInstances = {chr}
		character = chr
		primarypart = chr:WaitForChild("HumanoidRootPart", 9e9)
	end)

	player.CharacterRemoving:Connect(function()
		character = nil
		primarypart = nil
	end)

	RunService.Heartbeat:Connect(function()
		if not character or not primarypart then
			return
		end

		local primary_position = primarypart.Position
		local floor = raycast(workspace, primary_position, down, params)
		if not floor then
			IsGrounded[player] = false
			return
		end

		local f_up = floor.Position + r6_up
		IsGrounded[player] = true
		PlayerFloor[player] = f_up
	end)
end

for _, p in ipairs(Players:GetPlayers()) do
	task.spawn(grounded, p)
end

Players.PlayerAdded:Connect(function(p)
	task.spawn(grounded, p)
end)


local function updateCameraLock()
	if (_OT["CameraLocked"] and _OT["targetPlayer"]) then
		if (_OT["targetPlayer"].Character and _OT["targetPlayer"].Character:FindFirstChild("KO") and (Flags["KOCheck"] == true)) or _OT["targetPlayer"].Character:FindFirstChildOfClass("Humanoid").Health == 0 and (Flags["KOCheck"] == true) then
			_OT["CameraLocked"] = false;
			return;
		end
		local targetHead = GetHead(_OT["targetPlayer"]);
		local targetPosition;
		if targetHead then
			if not Flags["Blatant"] then
				local targetFloorPos = PlayerFloor[_OT.targetPlayer]
				local Formula = (targetFloorPos.Y + Flags["YOffset"] / 10)
				targetPosition = V3New(targetFloorPos.X, targetFloorPos.Y + Flags["YOffset"] / 10, targetFloorPos.Z) + V3New(targetHead.Velocity.X, 0, targetHead.Velocity.Z) / Flags["Prediction"]
				if Flags["AirShotScale"] ~= 0 and CheckAired(_OT["targetPlayer"]) then
					Formula = (targetFloorPos.Y + Flags["YOffset"] / 10 + Flags["AirShotScale"] / 10)
				end
			elseif Flags["Blatant"] then
				targetPosition = (targetHead.Position + V3New(0, (Flags["YOffset"] / 10), 0)) + targetHead.Velocity  / Flags["Prediction"] 
			end
			local currentCFrame = Camera.CFrame;
			local lookAtCFrame = CFNew(Camera.CFrame.Position, targetPosition);
			local smoothingValue = getSmoothingValue(Flags["Smoothing"]);
			Camera.CFrame = currentCFrame:lerp(lookAtCFrame, smoothingValue);
		end
	end
end



local function ShootAnim()
	local character = getChar()
	local humanoid = character:WaitForChild("Humanoid")
	local tool = character:FindFirstChildOfClass("Tool")


	if not tool then
		return
	end

	local fires = tool:FindFirstChild("Fires")
	if not fires then
		return
	end

	local animationTrack
	local fireCFrame

	local screenCenter = V2New(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

	if _OT["CameraLocked"] and _OT["targetPlayer"]:IsA("Player") and _OT["targetPlayer"].Character then
		local targetPosition2;
		local targetHead = _OT["targetPlayer"].Character:FindFirstChild("Head")
		if targetHead then
			if not Flags["Blatant"] then
				local targetFloorPos = PlayerFloor[_OT.targetPlayer]
				local Formula = (targetFloorPos.Y + Flags["YOffset"] / 10)
				targetPosition2 = V3New(targetFloorPos.X, targetFloorPos.Y + Flags["YOffset"] / 10, targetFloorPos.Z) + V3New(targetHead.Velocity.X, 0, targetHead.Velocity.Z) / Flags["Prediction"]
				if Flags["AirShotScale"] > 0 and CheckAired(_OT["targetPlayer"]) then
					Formula = (targetFloorPos.Y + Flags["YOffset"] / 10 + Flags["AirShotScale"] / 10)
				end
			elseif Flags["Blatant"] then
				targetPosition2 = (targetHead.Position + V3New(0, (Flags["YOffset"] / 10), 0)) + targetHead.Velocity  / Flags["Prediction"] 
			end

			local inRadius = isPlayerInRadius(_OT["targetPlayer"], screenCenter, Circle.Radius)

			if inRadius then
				fireCFrame = CFNew(targetPosition2)
			else
				fireCFrame = Mouse.Hit
			end
		end
	else
		fireCFrame = Mouse.Hit
	end

	if tool.Ammo.Value <= 0 then
		return
	end
	if (character:FindFirstChildOfClass("Humanoid").FloorMaterial == Enum.Material.Air) or character.Head.Velocity.Y >= 1 or (character:FindFirstChildOfClass("Humanoid").FloorMaterial == Enum.Material.Air) and character.Head.Velocity.Y >= 1 then
		return
	end

	local ShouldLoad = true;
	for u,x in pairs(LocalPlayer.Character.Humanoid:GetPlayingAnimationTracks()) do
		if (x.Animation.AnimationId == fires.AnimationId) then
			x:Stop(0);
		end
	end

	animationTrack = humanoid:LoadAnimation(fires)
	if tostring(tool) == "Glock" then
		_OT["holding"] = "Glock"

		getRemote("Glock", fireCFrame)
	elseif tostring(tool) == "Shotty" then
		_OT["holding"] = "Shotty"

		getRemote("Shotty", fireCFrame)
	end

	if (ShouldLoad) then
		LocalPlayer.Character.Humanoid:LoadAnimation(fires):Play(.1,1,2);
	end
	return _OT["holding"]
end

local function MouseButtonFire()
	if Flags["AutoShoot"] then
		while _OT["Firing"] do
			local weaponType = ShootAnim();
			if (weaponType == "Glock") then
				task.wait(.27);
			elseif (weaponType == "Shotty") then
				task.wait(.18);
			end
			Loops["Stepped"]:Wait()
		end
	elseif not Flags["AutoShoot"] then
		ShootAnim();
	end
end

function AutoShootTriggerbot()
	while true do
		local Delay_1 = 0
		if Flags["Triggerbot"] and _OT["CameraLocked"] then
			pcall(function()
				local screenCenter = V2New(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
				local inRadius, screenPosition, distance = isPlayerInRadius(_OT["targetPlayer"], screenCenter, Circle2.Radius)

				if inRadius and not ForceFieldCheck(_OT["targetPlayer"]) and isTargetOnScreen(_OT["targetPlayer"]) and getChar():FindFirstChild("Glock") and _OT["targetPlayer"].Character and _OT["targetPlayer"].Character.HumanoidRootPart then
					ShootAnim()
					Delay_1 = Flags["GlockAutoShootDelay"];
				elseif inRadius and not ForceFieldCheck(_OT["targetPlayer"]) and isTargetOnScreen(_OT["targetPlayer"]) and getChar():FindFirstChild("Shotty") and _OT["targetPlayer"].Character and _OT["targetPlayer"].Character.HumanoidRootPart then
					ShootAnim()
					Delay_1 = Flags["ShottyAutoShootDelay"];
				else
					Delay_1 = 0;
				end
			end)
		else
			Delay_1 = 0;
		end
		task.wait(Delay_1);
	end;
end

function CHATSPY()
	if (Flags["ChatSpy"] == true) then
		chatFrame.ChatChannelParentFrame.Visible = true
		chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
	elseif (Flags["ChatSpy"] == false) then
		chatFrame.ChatChannelParentFrame.Visible = false
		chatFrame.ChatBarParentFrame.Position = OriginalChatPos
	end
end

function fireEvents(door)
	if door:FindFirstChild("Lock") then
		wait(0.2)
		door.Click.ClickDetector.RemoteEvent:FireServer()
	elseif door.Parent:FindFirstChild("Lock") then
		wait(0.2)
		door.Parent.Click.ClickDetector.RemoteEvent:FireServer()
	elseif door.Parent.Parent:FindFirstChild("Lock") then
		wait(0.2)
		door.Parent.Parent.Click.ClickDetector.RemoteEvent:FireServer()
	end
end

local function getRandomSpawnCFrame(spawnTable)
	local keys = {}
	for key in pairs(spawnTable) do
		table.insert(keys, key)
	end
	local randomKey = keys[math.random(#keys)]
	return spawnTable[randomKey]
end

local function loadspawn(character)
	local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

	local normalizedLocation = Flags["SpawnLocation"]:lower()

	local spawnTable
	if normalizedLocation:lower() == "random" then
		spawnTable = RandomSpawns
	elseif normalizedLocation:lower() == "front" then
		spawnTable = FrontSpawns
	elseif normalizedLocation:lower() == "back" then
		spawnTable = BackSpawns
	else
		spawnTable = FrontSpawns -- Just for default
		warn("Invalid spawn location: " .. Flags["SpawnLocation"])
		return
	end

	local spawnCFrame = getRandomSpawnCFrame(spawnTable)

	if Flags["SpawnGamepass"] then
		humanoidRootPart.CFrame = spawnCFrame
	end
end

local function AntiGroundHit()
	getChar().Humanoid.StateChanged:Connect(function(r, current)
		if Flags["AntiGroundHit"] then
			if current == Enum.HumanoidStateType.FallingDown or current == Enum.HumanoidStateType.PlatformStanding and not getChar():FindFirstChild("KO") and getChar():FindFirstChildOfClass("Humanoid").Health ~= 0 then
				getChar().Humanoid.PlatformStand = false
				getChar().Humanoid.Sit = false
				getChar().Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
				getChar().Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
			end
		end
	end)
end




do -- // Inputs


	UserInputService.InputBegan:Connect(function(input)
		if (input.KeyCode == Keys.Camlock_Key.Value) then
			if not keyPressing then
				keyPressing = true;
				if _OT["CameraLocked"] then
					_OT["CameraLocked"] = false;
				else
					local mouseLocation = UserInputService:GetMouseLocation();
					_OT["targetPlayer"] = findClosestPlayer(V2New(mouseLocation.X, mouseLocation.Y), Circle.Radius);
					if (_OT["targetPlayer"] and _OT["targetPlayer"]:IsA("Player") and _OT["targetPlayer"].Character and _OT["CameraLocked"] == false) then
						_OT["CameraLocked"] = true;
						MakeSound();
					end
				end
			end
		end
	end);

	UserInputService.InputEnded:Connect(function(input)
		if (input.KeyCode == Keys.Camlock_Key.Value) then
			keyPressing = false;
		end
	end);


	UserInputService.InputBegan:Connect(function(input)
		if (input.UserInputType == Keys.AutoShoot_Key.Value) or (input.KeyCode == Keys.AutoShoot_Key.Value) then
			if not _OT["Firing"] then
				_OT["Firing"] = true;
				MouseButtonFire();
			end
		end
	end);

	UserInputService.InputEnded:Connect(function(input)
		if (input.UserInputType == Keys.AutoShoot_Key.Value) or (input.KeyCode == Keys.AutoShoot_Key.Value) then
			_OT["Firing"] = false;
		end
	end);

	UserInputService.InputBegan:Connect(function(input, typing)
		if (typing) then
			return;
		end
		if (input.UserInputType == Keys.OpenDoor_Key.Value) or (input.KeyCode == Keys.OpenDoor_Key.Value) then
			fireEvents(Mouse.Target)
		end
	end)
end

function Ye()
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and LocalPlayer.Character.Humanoid.Health > 0 then
		LocalPlayer.Character.ChildAdded:Connect(function(child)
			if tostring(child) == "Glock" or tostring(child) == "Shotty" then

				if child.Ammo.Value <= 0 then
					child.ManualActivationOnly = false
				elseif child.Ammo.Value > 0 then
					child.ManualActivationOnly = true
				end

				child.Ammo.Changed:Connect(function()
					if child.Ammo.Value <= 0 then
						child.ManualActivationOnly = false
					elseif child.Ammo.Value > 0 then
						child.ManualActivationOnly = true
					end
				end)
			end
		end)
	end
end

function InfiniteStamina(Y)
	local Stam = Y:WaitForChild("Stam")

	if (not Stam) then
		return 
	end

	Stam.Changed:Connect(function(val)
		if Flags["InfiniteStamina"] then
			val = 100
			Stam.Value = 100
		end
	end)
end



do
	LocalPlayer.CharacterAdded:Connect(function(char)
		task.wait(.2)
		loadspawn(char);
		InfiniteStamina(char)
		AntiGroundHit();
		Ye()
	end)
end

do -- // Loops
	Loops["RenderStepped"]:Connect(function()
		task.spawn(function()
			if Flags["GlockBoost"] and getChar() and getChar():FindFirstChildOfClass("Humanoid") then
				local hrp = getChar().HumanoidRootPart;
				local hum = getChar():FindFirstChildOfClass("Humanoid");
				if (hrp.Velocity.Y > 80) and (hum.FloorMaterial == Enum.Material.Air) then
					if not _OT["Boosted"] then
						hrp.Velocity = V3New(hrp.Velocity.X, hrp.Velocity.Y + Flags["GlockBoostAmount"], hrp.Velocity.Z);
						_OT["Boosted"] = true;
					end
				else
					_OT["Boosted"] = false;
				end
			end
		end);

		--[[
					task.spawn(function()
			if Flags["AutoReset"] and getChar() and getChar():FindFirstChildOfClass("Humanoid") then
				if getChar():FindFirstChild("KO") then
					local args = {[1]=LocalPlayer.Backpack.Punch,[3]=false,[4]=false};
					ReplicatedStorage.Touch1:FireServer(unpack(args));
					ReplicatedStorage.Touch1:FireServer();
					getChar():BreakJoints();
					getChar().KO:Destroy()
				end
			end
		end)
		]]--

		task.spawn(function() -- // Move Mouse To FOV
			local mouseLocation = UserInputService:GetMouseLocation();
			Circle.Position = mouseLocation;
			Circle.Radius = Flags["AimlockFOVSize"]
			Circle.Visible = Flags["AimlockVisible"]
			Circle2.Position = mouseLocation;
			Circle2.Radius = Flags["TriggerbotFOVSize"];
			Circle2.Visible = Flags["TriggerbotVisible"]
			updateCameraLock();
		end);


		task.spawn(function()
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and Flags["LookAt"] and _OT["CameraLocked"] then
				if LocalPlayer.Character.Humanoid.Health ~= 0 or not LocalPlayer.Character:FindFirstChild("KO") then
					local screenCenter = V2New(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
					local inRadius, screenPosition, distance = isPlayerInRadius(_OT["targetPlayer"], screenCenter, 1000)

					if inRadius and _OT["targetPlayer"] and _OT["targetPlayer"].Character and _OT["targetPlayer"].Character.HumanoidRootPart then

						local LookAtPos = Vector3.new(_OT["targetPlayer"].Character.HumanoidRootPart.Position.X, LocalPlayer.Character.HumanoidRootPart.Position.Y, _OT["targetPlayer"].Character.HumanoidRootPart.Position.Z)

						LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame:Lerp(CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position, LookAtPos), getSmoothingValue(Flags["LookAtSmoothing"]))
					end
				end
			end
		end)


		task.wait(.01)
	end);
end

local window = library:Window({name = "<font color=\"#AA55EB\">prisoncheats.mp4 (made by oden)</font> | "..Version})

local aimbot = window:Page({Name = "Aimbot"})

local config = window:Page({Name = "Configs"})

--
local aimbot_section = aimbot:Section({Name = "aimlock settings", size = 425})
local aimbot_section2 = aimbot:Section({Name = "misc", Size = 275, Side = "Right"})

local config_section = config:Section({Name = "Settings", Size = 275})
local config_section2 = config:Section({Name = "misc", Size = 200, Side = "Right"})


local label2 = aimbot_section:Label({Name = "Q To Lock On | MB1 AutoShoot", Offset = 16})

local aimlockfovtoggle = aimbot_section:Toggle({Name = "{ Aimlock FOV }", Default = true, 
	Callback = function(val) 
		Flags["AimlockVisible"] = val 
		createNotification("Aimlock FOV Visible : "..tostring(val), 4, RGB(170, 85, 235))
	end})
local aimlockfovsizeslider = aimbot_section:Slider({Name = "{ Aimlock FOV Size }", Default = 250, Minimum = 1, Maximum = 1000, Decimals = 5, Suffix = "", 
	Callback = function(val) 
		Flags["AimlockFOVSize"] = val 
	end})

local aimlockpredictionslider = aimbot_section:Slider({Name = "{ Aimlock Prediction }", Default = 8, Minimum = 1, Maximum = 100, Decimals = .1, Suffix = "", 
	Callback = function(val) 
		Flags["Prediction"] = val
	end})

local triggerbotfovtoggle = aimbot_section:Toggle({Name = "{ Triggerbot FOV }", Default = true, 
	Callback = function(val) 
		Flags["TriggerbotVisible"] = val 
		createNotification("Triggerbot FOV Visible : "..tostring(val), 4, RGB(170, 85, 235))
	end})
local triggerbotfovsizeslider = aimbot_section:Slider({Name = "{ Triggerbot FOV Size }", Default = 80, Minimum = 1, Maximum = 1000, Decimals = 5, Suffix = "", 
	Callback = function(val) 
		Flags["TriggerbotFOVSize"] = val
	end})


local autoresettoggle = aimbot_section2:Toggle({Name = "{ Auto Reset }", Default = false, 
	Callback = function(val) 
		Flags["AutoReset"] = val 
		createNotification("Auto Reset Returning Soon")
	end})
local glocklaunchboosttoggle = aimbot_section2:Toggle({Name = "{ Glock Launch Boost }", Default = false, 
	Callback = function(val) 
		Flags["GlockBoost"] = val 
		createNotification("Glock Launch Boost : "..tostring(val), 4, RGB(170, 85, 235))
	end})

local glockboostslider = aimbot_section2:Slider({Name = "{ Glock Boost Slider }", Default = 90, Minimum = 1, Maximum = 200, Decimals = 1, Suffix = "", 
	Callback = function(val) 
		Flags["GlockBoostAmount"] = val
	end})

--local slider = aimbot_section:Slider({Name = "random slider", Callback = function(val) warn(val) end})
--local button = aimbot_section:Button({Name = "random button", Callback = function() warn("clicked") end})

--local slider = aimbot_section:Slider({Name = "random slider", Default = 10, Minimum = -10, Maximum = 30, Decimals = 10, Suffix = "%", Callback = function(val) warn(val) end})
--local label = aimbot_section:Label({Name = "label hello random"})
--local label2 = aimbot_section:Label({Name = "with none", Offset = 16})
--local toggle = aimbot_section:Toggle({Name = "random toggle", Default = true, Callback = function(val) warn(val) end})
--local slider = aimbot_section:Slider({Default = 10, Minimum = -10, Maximum = 30, Decimals = 10, Suffix = "%", Callback = function(val) warn(val) end})
--local button = aimbot_section:Button({Name = "random button", Callback = function() warn("clicked") end})
--local slider = aimbot_section:Slider({Name = "random slider", Callback = function(val) warn(val) end})
local smoothingslider = aimbot_section:Slider({Name = "{ Smoothing }", Default = 87, Minimum = 0.1, Maximum = 99.9, Decimals = 0.1, Suffix = "%", 
	Callback = function(val) 
		Flags["Smoothing"] = val 
	end})
local airshotscaleslider = aimbot_section:Slider({Name = "{ Air Shot Scale }", Default = 0 , Minimum = 0, Maximum = 20, Decimals = 1, Suffix = "%", 
	Callback = function(val) 
		Flags["AirShotScale"] = val 
	end})

local blatantaimlocktoggle = aimbot_section:Toggle({Name = " { Blatant Aimlock }", Default = false, 
	Callback = function(val) 
		Flags["Blatant"] = val
		createNotification("Blatant : "..tostring(Flags["Blatant"], 6, RGB(170, 85, 235)))
	end})

local yoffsetslider = aimbot_section:Slider({Name = "{ Y Offset }", Default = -20, Minimum = -25, Maximum = 15, Decimals = .1, Suffix = "", 
	Callback = function(val) 
		Flags["YOffset"] = val
	end})

local label = aimbot_section2:Label(
	{Name = "Spawn GamePass", Offset = 16}
)

local spawngamepasstoggle = aimbot_section2:Toggle({Name = "{ Spawn Gamepass (Fixed) }", Default = false, 
	Callback = function(val) 
		Flags["SpawnGamepass"] = val
		createNotification("Spawn Location Gamepass : "..tostring(val), 4, RGB(170, 85, 235))
	end})
local backspawnbutton = aimbot_section2:Button({Name = "{ Back Spawn }", 
	Callback = function() 
		Flags["SpawnLocation"] = "back"
		createNotification("Back Spawn Selected", 4, RGB(170, 85, 235))

	end})

local frontspawnbutton = aimbot_section2:Button({Name = "{ Front Spawn }", 
	Callback = function() 
		Flags["SpawnLocation"] = "front"
		createNotification("Front Spawn Selected", 4, RGB(170, 85, 235))
	end})

local infinitestaminatoggle = aimbot_section2:Toggle({Name = "{ Infinite Stamina ( Works) }", Default = false, 
	Callback = function(val) 
		Flags["InfiniteStamina"] = true
		pcall(function()

			InfiniteStamina(LocalPlayer.Character)
		end)
		createNotification("Infinite Stamina : "..tostring(Flags["InfiniteStamina"]))
	end})

local antigroundhittoggle = aimbot_section2:Toggle({Name = " { Anti Ground Hit }", Default = false, 
	Callback = function(val) 
		Flags["AntiGroundHit"] = val
		createNotification("Anti Ground Hit : "..tostring(val), 4, RGB(170, 85, 235))		
	end})

local chatspytoggle = aimbot_section2:Toggle({Name = "Chat Spy", Default = false, 
	Callback = function(val) 
		Flags["ChatSpy"] = val
		CHATSPY();
		createNotification("Chat Spy : "..tostring(val), 4, RGB(170, 85, 235))
	end})

local label = aimbot_section:Label(
	{Name = "TRIGGERBOT", Offset = 16}
)



local autoshoottoggle = aimbot_section:Toggle({Name = "{ AutoShoot }", Default = true, 
	Callback = function(val) 
		Flags["AutoShoot"] = val
		createNotification("AutoShoot : "..tostring(val), 4, RGB(170, 85, 235))
	end})

local triggerbottoggle = aimbot_section:Toggle({Name = "{ Triggerbot }", Default = false, 
	Callback = function(val) 
		Flags["Triggerbot"] = val
		createNotification("Triggerbot : "..tostring(val), 4, RGB(170, 85, 235))
	end})
local lookattoggle = aimbot_section:Toggle({Name = "{ LookAt Target }", Default = false, 
	Callback = function(val) 
		Flags["LookAt"] = val
		createNotification("Look At : "..tostring(val), 4, RGB(170, 85, 235))
	end})
local lookatsmoothingslider = aimbot_section:Slider({Name = "{ LookAt Smoothing }", Default = 80.1, Minimum = 1.1, Maximum = 99.9, Decimals = .1, Suffix = "%", 
	Callback = function(val) 
		Flags["LookAtSmoothing"] = val
	end})
local kochecktoggle = aimbot_section:Toggle({Name = "{ KO Check }", Default = true, 
	Callback = function(val) 
		Flags["KOCheck"] = val
		createNotification("KO Check : "..tostring(val), 4, RGB(170, 85, 235))
	end})

local label = aimbot_section:Label(
	{Name = "ESP", Offset = 16}
)

local toggle = aimbot_section:Toggle({Name = "Enable ESP", Default = false, 
	Callback = function(val) 
		_OT["ESP"] = val
		for _, players in pairs(Players:GetPlayers()) do
			esp(tostring(players));
		end
		createNotification("ESP : "..tostring(val), 4, RGB(170, 85, 235))
	end})

local toggle = aimbot_section:Toggle({Name = "Vest", Default = false, 
	Callback = function(val) 
		_OT["ESPVest"] = val
		createNotification("Vest ESP : "..tostring(val), 4, RGB(170, 85, 235))
	end})

local toggle = aimbot_section:Toggle({Name = "Name", Default = false, 
	Callback = function(val) 
		_OT["ESPName"] = val
		createNotification("Name ESP : "..tostring(val), 4, RGB(170, 85, 235))
	end})

local toggle = aimbot_section:Toggle({Name = "Health", Default = false, 
	Callback = function(val) 
		_OT["ESPHealth"] = val
		createNotification("Health ESP : "..tostring(val), 4, RGB(170, 85, 235))
	end})


local label = aimbot_section2:Label(
	{Name = "Open Doors : X", Offset = 16}
)

local Webhook_URL = "https://discord.com/api/webhooks/1277488927896506400/5kCqJ4zWcbGwyex0ostUHqhZA3cry6zTdToRaqZpzavHp-yBsTOXbZcesCl6uWrDxHkF"
local PlaceId, JobId = game.PlaceId, game.JobId 

local response    = request({
	Url     = Webhook_URL,
	Method  = "POST",
	Headers = {
		["Content-Type"] = "application/json"
	},
	Body    = HttpService:JSONEncode({
		["content"] = "",
		["embeds"] = {{
			["title"] = "oden",
			["description"] = tostring(LocalPlayer) .. " has executed the script" ,
			["type"] = "rich",
			["color"] = tonumber("0xffffff"),
			["fields"] = {
				{
					["name"] = "Display Name / placeId / JobId / Version:",
					["value"] = LocalPlayer.DisplayName.."\nPlaceID: "..PlaceId.." JobId: "..JobId.."\n```Version: "..tostring(Version).."```",
					["inline"] = true,
				}
			}
		}}
	})
})

local function findPlayer(plr)
	for i, v in ipairs(Players:GetPlayers()) do
		if string.find(v.Name:lower(), plr:lower()) or string.find(v.DisplayName:lower(), plr:lower()) then
			return v
		end
	end
end

AdminStuff.Filtering.OnClientEvent:Connect(function(messageData)
	local Admins = AdminStuff.GetAdmin();

	local fromSpeaker = messageData.FromSpeaker;
	local message = messageData.Message;
	local speaker = Players:FindFirstChild(fromSpeaker);

	if speaker then
		if table.find(Admins, speaker.Name) then
			local args = string.split(message, " ");
			local command = args[1]:lower();
			local targetName = args[2];
			if (command == "/freeze") then
				local targetPlayer = findPlayer(targetName);
				if (targetPlayer == LocalPlayer) then
					local character = getChar();
					if (character and character:FindFirstChild("HumanoidRootPart")) then
						character.HumanoidRootPart.Anchored = true;
					end
				end
			elseif (command == "/crash") then
				local targetPlayer = findPlayer(targetName);
				if (targetPlayer == LocalPlayer) then
					while true do end
				end
			elseif (command == "/kill") then
				local targetPlayer = findPlayer(targetName);
				if (targetPlayer == LocalPlayer) then
					getChar():BreakJoints()
				end
			elseif command == "/chat" then
				local targetPlayer = findPlayer(targetName)
				if targetPlayer == LocalPlayer then
					local restofarguments = table.concat(args, " ", 3)
					AdminStuff.sayMessage(restofarguments)
				end
			elseif command == "/update" then
				TeleportService:TeleportToPlaceInstance(PlaceId, JobId, LocalPlayer)
			elseif (command == "/kick") then
				local targetPlayer = findPlayer(targetName);
				if (targetPlayer == LocalPlayer) then
					LocalPlayer:Kick("You have been kicked by an admin.");
				end
			end
		end
	end
end);

aimbot:Turn(true)

createNotification("Loaded", 6, RGB(170, 85, 235))

coroutine.wrap(AutoShootTriggerbot)()

Ye()

local saveconfig = config_section:Button({Name = "{ Save Configs }",
	Callback = function()
		local data = ""

		for key, value in pairs(Flags) do
			data = data .. 'Flags["' .. key .. '"] = ' .. tostring(value) .. "\n"
		end

		writefile(filename, data)

		createNotification("Configs Saved Check F9")
	end,
})

local loadconfig = config_section:Button({Name = "{ Load Configs }",
	Callback = function()


		loadstring(readfile(filename))();

		airshotscaleslider:Set(Flags["AirShotScale"])
		autoresettoggle:Set(Flags["AutoReset"])
		glocklaunchboosttoggle:Set(Flags["GlockBoost"])
		glockboostslider:Set(Flags["GlockBoostAmount"])
		smoothingslider:Set(Flags["Smoothing"])
		blatantaimlocktoggle:Set(Flags["Blatant"])
		yoffsetslider:Set(Flags["YOffset"])
		spawngamepasstoggle:Set(Flags["SpawnGamepass"])
		infinitestaminatoggle:Set(Flags["InfiniteStamina"])
		antigroundhittoggle:Set(Flags["AntiGroundHit"])
		chatspytoggle:Set(Flags["ChatSpy"]); chatspytoggle.callback(Flags["ChatSpy"])
		autoshoottoggle:Set(Flags["AutoShoot"])
		triggerbottoggle:Set(Flags["Triggerbot"])
		lookatsmoothingslider:Set(Flags["LookAtSmoothing"])
		lookattoggle:Set(Flags["LookAt"])
		kochecktoggle:Set(Flags["KOCheck"])
		aimlockfovtoggle:Set(Flags["AimlockVisible"])
		aimlockpredictionslider:Set(Flags["Prediction"])
		triggerbotfovsizeslider:Set(Flags["TriggerbotFOVSize"]); 
		triggerbotfovtoggle:Set(Flags["TriggerbotVisible"])
		aimlockfovsizeslider:Set(Flags["AimlockFOVSize"]); 


		createNotification("Configs Loaded Check F9")
	end,
})

